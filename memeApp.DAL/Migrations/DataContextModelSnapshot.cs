// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using memeApp.DAL.Data;

#nullable disable

namespace memeApp.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("memeApp.DAL.Model.MemeTemplateDownload", b =>
                {
                    b.Property<Guid>("DownloadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DownloadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UploadsUploadID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DownloadId");

                    b.HasIndex("UploadsUploadID");

                    b.ToTable("DownloadMeme", (string)null);
                });

            modelBuilder.Entity("memeApp.DAL.Model.MemeTemplateUpload", b =>
                {
                    b.Property<Guid>("UploadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("fileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("UploadID");

                    b.HasIndex("UsersId");

                    b.ToTable("UploadMeme", (string)null);
                });

            modelBuilder.Entity("memeApp.DAL.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VerificationToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("userRoleRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("userRoleRoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("memeApp.DAL.Model.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Role_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("MemeTemplateDownloadUser", b =>
                {
                    b.Property<Guid>("memeTemplateDownloadsDownloadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("usersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("memeTemplateDownloadsDownloadId", "usersId");

                    b.HasIndex("usersId");

                    b.ToTable("MemeTemplateDownloadUser", (string)null);
                });

            modelBuilder.Entity("memeApp.DAL.Model.MemeTemplateDownload", b =>
                {
                    b.HasOne("memeApp.DAL.Model.MemeTemplateUpload", "Uploads")
                        .WithMany("Downloads")
                        .HasForeignKey("UploadsUploadID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uploads");
                });

            modelBuilder.Entity("memeApp.DAL.Model.MemeTemplateUpload", b =>
                {
                    b.HasOne("memeApp.DAL.Model.User", "Users")
                        .WithMany("memeTemplateUploads")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("memeApp.DAL.Model.User", b =>
                {
                    b.HasOne("memeApp.DAL.Model.UserRole", "userRole")
                        .WithMany("users")
                        .HasForeignKey("userRoleRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userRole");
                });

            modelBuilder.Entity("MemeTemplateDownloadUser", b =>
                {
                    b.HasOne("memeApp.DAL.Model.MemeTemplateDownload", null)
                        .WithMany()
                        .HasForeignKey("memeTemplateDownloadsDownloadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("memeApp.DAL.Model.User", null)
                        .WithMany()
                        .HasForeignKey("usersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("memeApp.DAL.Model.MemeTemplateUpload", b =>
                {
                    b.Navigation("Downloads");
                });

            modelBuilder.Entity("memeApp.DAL.Model.User", b =>
                {
                    b.Navigation("memeTemplateUploads");
                });

            modelBuilder.Entity("memeApp.DAL.Model.UserRole", b =>
                {
                    b.Navigation("users");
                });
#pragma warning restore 612, 618
        }
    }
}
